@using _02_Application.Dtos
@using Syncfusion.Blazor.Navigations
@inherits ProskonComponentBase

<SfSidebar Target="#layout-container"
           EnableDock="true"
           DockSize="60"
           @ref="sidebarObj"
           EnablePersistence="true"
           Type="SidebarType.Push"
           @bind-IsOpen="IsOpen"
           Width="260px"
           MediaQuery="(max-width: 768px)">

    <SfSidebarContainer>
        <ChildContent>
            <!-- Statik Menü -->
            <div class="sidebar-static-item">
                <a href="/manage/dashboard" class="sidebar-link @(Navigation.Uri.Contains("/dashboard") ? "active" : null)" title="Dashboard">
                    <i class="bi bi-speedometer2 text-bg-secondary"></i>
                    <span class="sidebar-text">Dashboard</span>
                </a>
            </div>

            <!-- Dinamik Menü -->
            @if (Modules is not null && Modules.Count > 0)
            {
                @foreach (var module in Modules)
                {
                    @RenderModule(module)
                }
            }

            <div class="sidebar-static-item">
                <a href="/manage/roles" class="sidebar-link @(Navigation.Uri.Contains("/roles") ? "active" : null)" title="Dashboard">
                    <i class="bi bi-diagram-2-fill text-bg-secondary"></i>
                    <span class="sidebar-text">Roller</span>
                </a>
            </div>

        </ChildContent>
    </SfSidebarContainer>
</SfSidebar>

@code {
    private SfSidebar sidebarObj = default!;

    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

    private List<ModuleTreeDto> Modules = new();

    protected override async Task OnInitializedAsync()
    { 
        Modules = await ModuleService.GetTreeForCurrentAsync();
         
        SubscribeLocationChanged((_, __) => _ = SafeStateHasChangedAsync());
    }

    RenderFragment RenderModule(ModuleTreeDto module, int depth = 0) => builder =>
    {
        int seq = 0;
        string icon = $"bi {GetIconName(module.IconMultiple)}";

        builder.OpenElement(seq++, "div");
        builder.AddAttribute(seq++, "class", "sidebar-dynamic-item");

        builder.OpenElement(seq++, "a");
        builder.AddAttribute(seq++, "class", $"sidebar-link{(IsActive(module) ? " active" : "")}");
         
        builder.AddAttribute(seq++, "style", $"--depth:{depth}; --icon-color:{module.ColorFore};");

        builder.AddAttribute(seq++, "href", $"/module/{module.Id}");
        builder.AddAttribute(seq++, "title", module.PageText);

        builder.OpenElement(seq++, "i");
        builder.AddAttribute(seq++, "style", $"background-color:{module.ColorBack}; color:{module.ColorFore};");
        builder.AddAttribute(seq++, "class", icon);
        builder.CloseElement(); // i

        builder.OpenElement(seq++, "span");
        builder.AddAttribute(seq++, "class", "sidebar-text");
        builder.AddContent(seq++, module.PageText);
        builder.CloseElement(); // span

        builder.CloseElement(); // a

        if (module.Children is not null && module.Children.Count > 0)
        {
            foreach (var child in module.Children)
            {
                builder.AddContent(seq++, RenderModule(child, depth + 1));
            }
        }

        builder.CloseElement(); // div
    };

    private bool IsActive(ModuleTreeDto module)
    {
        var uri = Navigation.Uri;
        return uri.Contains($"/module/{module.Id}", StringComparison.OrdinalIgnoreCase);
    }

    private string GetIconName(int iconMultiple)
    {
        var name = ((_02_Application.Services.IconName)iconMultiple).ToString()
            .Replace("_", "-").ToLowerInvariant();
        return name;
    }
}
