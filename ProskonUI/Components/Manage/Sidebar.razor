@using Syncfusion.Blazor.Navigations
@using _02_Application.Services
@inject IModuleService ModuleService
@inject IUserService UserService
@inject IClaimService ClaimService
@inject NavigationManager Navigation

<SfSidebar Target="#layout-container"
           EnableDock="true"
           DockSize="60"
           @ref="sidebarObj"
           EnablePersistence="true"
           Type="SidebarType.Push"
           @bind-IsOpen="IsOpen"
           Width="50vh">
    <SfSidebarContainer>
        <ChildContent>
            <!-- Statik Menü -->
            <div class="sidebar-static-item">
                <a href="/dashboard" class="sidebar-link">
                    <i class="bi bi-house"></i> Dashboard
                </a>
            </div>

            <!-- Dinamik Menü -->
            @if (Modules is not null)
            {
                @foreach (var module in Modules)
                {
                    @RenderModule(module)
                }
            }
        </ChildContent>
    </SfSidebarContainer>
</SfSidebar>

@code {
    SfSidebar sidebarObj = default!;
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

    private List<ModuleTreeDto> Modules = [];

    protected override async Task OnInitializedAsync()
    {
        var user = await UserService.GetByIdAsync(CurrentUserId); // bu id dışarıdan alınmalı veya ClaimsPrincipal ile çözülmeli
        
        if (user is null)
        {
            Navigation.NavigateTo("/login");
            return;
        }
        
        var userClaims = await ClaimService.GetByUserIdAsync(user.Id);
        var moduleTree = await ModuleService.GetTreeAsync();

        // sadece kullanıcının claim'lerinde olan modüller ve sayfa açılabilenler
        Modules = FilterModulesByClaims(moduleTree, userClaims.Select(c => c.Value).ToHashSet());
    }

    private List<ModuleTreeDto> FilterModulesByClaims(List<ModuleTreeDto> modules, HashSet<string> claimValues)
    {
        List<ModuleTreeDto> result = [];

        foreach (var module in modules)
        {
            if (module.IsCanPage && claimValues.Contains(module.Id.ToString()))
            {
                var filteredChildren = FilterModulesByClaims(module.Children, claimValues);
                result.Add(new ModuleTreeDto
                {
                    Id = module.Id,
                    Name = module.Name,
                    PageText = module.PageText,
                    ColorBack = module.ColorBack,
                    ColorFore = module.ColorFore,
                    IconMultiple = module.IconMultiple,
                    IsCanPage = true,
                    Children = filteredChildren
                });
            }
            else
            {
                // çocuklarından biri yetkiliyse yine ekle
                var filteredChildren = FilterModulesByClaims(module.Children, claimValues);
                if (filteredChildren.Count > 0)
                {
                    result.Add(new ModuleTreeDto
                    {
                        Id = module.Id,
                        Name = module.Name,
                        PageText = module.PageText,
                        ColorBack = module.ColorBack,
                        ColorFore = module.ColorFore,
                        IconMultiple = module.IconMultiple,
                        IsCanPage = false,
                        Children = filteredChildren
                    });
                }
            }
        }

        return result;
    }

    RenderFragment RenderModule(ModuleTreeDto module) => builder =>
    {
        int seq = 0;
        string icon = $"bi bi-{GetIconName(module.IconMultiple)}";

        builder.OpenElement(seq++, "div");
        builder.AddAttribute(seq++, "class", "sidebar-dynamic-item");

        builder.OpenElement(seq++, "a");
        builder.AddAttribute(seq++, "class", "sidebar-link");
        builder.AddAttribute(seq++, "style", $"color:{module.ColorFore}; background-color:{module.ColorBack};");
        builder.AddAttribute(seq++, "href", $"/module/{module.Id}");

        builder.OpenElement(seq++, "i");
        builder.AddAttribute(seq++, "class", icon);
        builder.CloseElement(); // i

        builder.AddContent(seq++, $" {module.PageText}");
        builder.CloseElement(); // a

        // alt modülleri varsa iç içe render et
        if (module.Children is not null && module.Children.Count > 0)
        {
            foreach (var child in module.Children)
            {
                builder.AddContent(seq++, RenderModule(child));
            }
        }

        builder.CloseElement(); // div
    };

    private string GetIconName(int iconMultiple)
    {
        var name = ((_02_Application.Services.IconName)iconMultiple).ToString().Replace("_", "-").ToLowerInvariant();
        return name;
    }

    private Guid CurrentUserId => // burada geçerli kullanıcının Id'sini bulmalısın
        Guid.Parse("00000000-0000-0000-0000-000000000001"); // örnek olarak sabit verdim
}
