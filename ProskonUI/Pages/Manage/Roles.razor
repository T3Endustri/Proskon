@page "/manage/roles"
@inherits ProskonUI.Framework.Base.ProskonPageBase
@using ProskonUI.Components.Manage
@using _02_Application.Dtos
@using _02_Application.Interfaces
@layout ManageLayout
@attribute [Authorize(Policy = "RoleManagement")]
 
<PageTitle>Roller</PageTitle>

<RolesGrid AllowEdit="true"
           FetchListAsync="FetchListAsync"
           FetchByIdAsync="FetchByIdAsync"
           CreateAsync="CreateAsync"
           UpdateAsync="UpdateAsync"
           DeleteAsync="DeleteAsync"
           FetchParentIdsAsync="FetchParentIdsAsync"
           FetchChildIdsAsync="FetchChildIdsAsync"
           SetParentsAsync="SetParentsAsync"
           SetChildrenAsync="SetChildrenAsync"
           FetchUserLookupAsync="FetchUserLookupAsync"
           FetchUsersOfRoleAsync="FetchUsersOfRoleAsync"
           SetUsersOfRoleAsync="SetUsersOfRoleAsync" />

@code {
    // ---------- Liste / Detay / CRUD ----------
    private Task<IReadOnlyList<RoleListDto>> FetchListAsync()
        => RoleService.GetAllAsync().ContinueWith(t => (IReadOnlyList<RoleListDto>)t.Result);

    private async Task<RoleDto> FetchByIdAsync(Guid id)
        => await RoleService.GetByIdAsync(id) ?? new RoleDto { Id = id };

    private Task CreateAsync(RoleDto dto)
        => RoleService.AddAsync(dto);

    private Task UpdateAsync(RoleDto dto)
        => RoleService.UpdateAsync(dto);

    private Task DeleteAsync(Guid id)
        => RoleService.DeleteAsync(id);
         

    private async Task<IReadOnlyList<Guid>> FetchParentIdsAsync(Guid roleId)
        => await RoleService.GetDirectParentIdsAsync(roleId);

    private async Task<IReadOnlyList<Guid>> FetchChildIdsAsync(Guid roleId)
        => await RoleService.GetDirectChildIdsAsync(roleId);

    // ---------- Hiyerarşi: Tam set güncelle ----------
    private Task SetParentsAsync(Guid roleId, List<Guid> parentIds)
        => RoleService.SetParentsAsync(roleId, (parentIds ?? new List<Guid>()).Distinct().ToList());

    private Task SetChildrenAsync(Guid roleId, List<Guid> childIds)
        => RoleService.SetChildrenAsync(roleId, (childIds ?? new List<Guid>()).Distinct().ToList());

    // ---------- Kullanıcılar ----------
    // MultiSelect lookup
    private async Task<IReadOnlyList<UserListDto>> FetchUserLookupAsync()
        => await UserService.GetAllAsync(); // Sizde farklıysa kendi lookup metodunuzu çağırın.

    // Roldeki kullanıcıları (ön seçimi doldurmak için) sadece Id’leriyle döndür.
    private async Task<IReadOnlyList<UserListDto>> FetchUsersOfRoleAsync(Guid roleId)
    {
        var ru = await RoleService.GetUsersAsync(roleId);
        return ru.Users.Select(u => new UserListDto { Id = u.Id, FirstName = u.DisplayName, Email = u.Email??"" }).ToList();
    }

    private async Task SetUsersOfRoleAsync(Guid roleId, List<Guid> userIds)
    => await RoleService.AssignUsersAsync(
        new AssignUsersToRoleRequest(roleId, userIds)
    );

}
