// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _01_Data.Context;

#nullable disable

namespace _01_Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250818133256_Create-MigV0")]
    partial class CreateMigV0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("_01_Data.Entities.T3Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid?>("ApprovedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsApprove")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedUserId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("TemplateId");

                    b.ToTable("T3Form");
                });

            modelBuilder.Entity("_01_Data.Entities.T3FormField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("PropertyFieldId");

                    b.ToTable("T3FormField");
                });

            modelBuilder.Entity("_01_Data.Entities.T3FormFieldValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FormFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormFieldId");

                    b.HasIndex("UserId");

                    b.ToTable("T3FormFieldValue");
                });

            modelBuilder.Entity("_01_Data.Entities.T3FormResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<bool>("AllowMultipleSelection")
                        .HasColumnType("bit");

                    b.Property<short>("DataType")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsSystemDefined")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("T3FormResource");
                });

            modelBuilder.Entity("_01_Data.Entities.T3FormResourceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortBy")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.ToTable("T3FormResourceItem");
                });

            modelBuilder.Entity("_01_Data.Entities.T3IdentityClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<short>("PermissionType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("T3IdentityClaim");
                });

            modelBuilder.Entity("_01_Data.Entities.T3IdentityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDepartment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsTeam")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("StartPage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.ToTable("T3IdentityRole");
                });

            modelBuilder.Entity("_01_Data.Entities.T3IdentityRoleHierarchy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("ParentId", "ChildId")
                        .IsUnique();

                    b.ToTable("T3IdentityRoleHierarchy");
                });

            modelBuilder.Entity("_01_Data.Entities.T3IdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("StartPage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.ToTable("T3IdentityUser");
                });

            modelBuilder.Entity("_01_Data.Entities.T3IdentityUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("T3IdentityUserRole");
                });

            modelBuilder.Entity("_01_Data.Entities.T3Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalFilter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModuleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortBy")
                        .HasColumnType("int");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<long>("Target")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("ModuleTypeId");

                    b.ToTable("T3Item");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ItemHierarchy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("ParentId", "ChildId")
                        .IsUnique();

                    b.ToTable("T3ItemHierarchy");
                });

            modelBuilder.Entity("_01_Data.Entities.T3Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsStation")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("OperationNo")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("T3Location");
                });

            modelBuilder.Entity("_01_Data.Entities.T3LocationHierarchy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("ParentId");

                    b.ToTable("T3LocationHierarchy");
                });

            modelBuilder.Entity("_01_Data.Entities.T3LocationItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("Entry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Exit")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("LocationId");

                    b.ToTable("T3LocationItem");
                });

            modelBuilder.Entity("_01_Data.Entities.T3Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("ColorBack")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("ColorFore")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("IconMultiple")
                        .HasColumnType("int");

                    b.Property<int>("IconSingle")
                        .HasColumnType("int");

                    b.Property<bool>("IsCanBarcode")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCanFilter")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCanModuleType")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCanPage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCanSerial")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCanShift")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCanTarget")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCanTemplate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValue("")
                        .UseCollation("Turkish_CI_AS");

                    b.Property<string>("PageText")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UX_T3Module_Name");

                    b.ToTable("T3Module");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ModuleHierarchy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("ParentId");

                    b.ToTable("T3ModuleHierarchy");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ProcessType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("ColorBack")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("ColorFore")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<int>("IconMultiple")
                        .HasColumnType("int");

                    b.Property<int>("IconSingle")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortBy")
                        .HasColumnType("int");

                    b.Property<long>("Target")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("T3ProcessType");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ProcessTypeItem", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ItemId", "TypeId");

                    b.HasIndex("ItemId");

                    b.HasIndex("TypeId");

                    b.ToTable("T3ProcessTypeItem");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ProcessTypeModule", b =>
                {
                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ModuleId", "TypeId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("TypeId");

                    b.ToTable("T3ProcessTypeModule");
                });

            modelBuilder.Entity("_01_Data.Entities.T3Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("ExtField")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<short>("FieldType")
                        .HasColumnType("smallint");

                    b.Property<bool>("FileMultiple")
                        .HasColumnType("bit");

                    b.Property<string>("FileTypes")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<Guid?>("FormResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("MaxLength")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<double>("RMax")
                        .HasColumnType("float");

                    b.Property<double>("RMin")
                        .HasColumnType("float");

                    b.Property<double>("RStep")
                        .HasColumnType("float");

                    b.Property<bool>("Range")
                        .HasColumnType("bit");

                    b.Property<bool>("Require")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("FormResourceId");

                    b.ToTable("T3Property");
                });

            modelBuilder.Entity("_01_Data.Entities.T3PropertyPanel", b =>
                {
                    b.Property<Guid>("PropertyFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PanelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Column")
                        .HasColumnType("int");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortBy")
                        .HasColumnType("int");

                    b.HasKey("PropertyFieldId", "PanelId");

                    b.HasIndex("PanelId");

                    b.ToTable("T3PropertyPanel");
                });

            modelBuilder.Entity("_01_Data.Entities.T3PropertyTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("Column")
                        .HasColumnType("int");

                    b.Property<Guid>("PropertyFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortBy")
                        .HasColumnType("int");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PropertyFieldId");

                    b.HasIndex("TemplateId");

                    b.ToTable("T3PropertyTemplate");
                });

            modelBuilder.Entity("_01_Data.Entities.T3Protocol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProcessTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortBy")
                        .HasColumnType("int");

                    b.Property<long>("Target")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProcessTypeId");

                    b.ToTable("T3Protocol");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ProtocolItem", b =>
                {
                    b.Property<Guid>("ProtocolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("Target")
                        .HasColumnType("bigint");

                    b.HasKey("ProtocolId", "ItemId", "LocationId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LocationId");

                    b.ToTable("T3ProtocolItem");
                });

            modelBuilder.Entity("_01_Data.Entities.T3Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Finish")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("T3Shift");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ShiftBreak", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("T3ShiftBreak");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ShiftType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("T3ShiftType");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ShiftTypeBreak", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<long>("EndTime")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("ShiftTypeDayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ShiftTypeDayId");

                    b.ToTable("T3ShiftTypeBreak");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ShiftTypeCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("T3ShiftTypeCategory");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ShiftTypeDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<byte>("DayOfWeek")
                        .HasColumnType("tinyint");

                    b.Property<long>("EndTime")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("ShiftTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ShiftTypeId" }, "IX_T3ShiftTypeDay_ShiftTypeId");

                    b.ToTable("T3ShiftTypeDay");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ShiftTypeLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("ShiftTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ShiftTypeId");

                    b.ToTable("T3ShiftTypeLocation");
                });

            modelBuilder.Entity("_01_Data.Entities.T3Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("ColumnCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("T3Template");
                });

            modelBuilder.Entity("_01_Data.Entities.T3TemplateApprover", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("T3TemplateApprover");
                });

            modelBuilder.Entity("_01_Data.Entities.T3TemplatePanel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortBy")
                        .HasColumnType("int");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("T3TemplatePanel");
                });

            modelBuilder.Entity("_01_Data.Entities.T3Form", b =>
                {
                    b.HasOne("_01_Data.Entities.T3IdentityUser", "ApprovedUser")
                        .WithMany("ListFormApproveds")
                        .HasForeignKey("ApprovedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("_01_Data.Entities.T3IdentityUser", "CreateUser")
                        .WithMany("ListFormCreates")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_01_Data.Entities.T3Item", "Item")
                        .WithOne("Form")
                        .HasForeignKey("_01_Data.Entities.T3Form", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_01_Data.Entities.T3Module", "Module")
                        .WithOne("Form")
                        .HasForeignKey("_01_Data.Entities.T3Form", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_01_Data.Entities.T3Template", "Template")
                        .WithMany("ListForms")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedUser");

                    b.Navigation("CreateUser");

                    b.Navigation("Item");

                    b.Navigation("Module");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("_01_Data.Entities.T3FormField", b =>
                {
                    b.HasOne("_01_Data.Entities.T3Form", "Form")
                        .WithMany("ListFormFields")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_01_Data.Entities.T3Property", "PropertyField")
                        .WithMany("ListFormFields")
                        .HasForeignKey("PropertyFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("PropertyField");
                });

            modelBuilder.Entity("_01_Data.Entities.T3FormFieldValue", b =>
                {
                    b.HasOne("_01_Data.Entities.T3FormField", "FormField")
                        .WithMany("ListValues")
                        .HasForeignKey("FormFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_01_Data.Entities.T3IdentityUser", "CreateUser")
                        .WithMany("ListFormFieldValue")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("FormField");
                });

            modelBuilder.Entity("_01_Data.Entities.T3FormResourceItem", b =>
                {
                    b.HasOne("_01_Data.Entities.T3FormResource", "FormResource")
                        .WithMany("ListItems")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormResource");
                });

            modelBuilder.Entity("_01_Data.Entities.T3IdentityClaim", b =>
                {
                    b.HasOne("_01_Data.Entities.T3IdentityRole", "Role")
                        .WithMany("ListClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("_01_Data.Entities.T3IdentityUser", "User")
                        .WithMany("ListClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_01_Data.Entities.T3IdentityRoleHierarchy", b =>
                {
                    b.HasOne("_01_Data.Entities.T3IdentityRole", "Child")
                        .WithMany("ListParents")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_01_Data.Entities.T3IdentityRole", "Parent")
                        .WithMany("ListChilds")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("_01_Data.Entities.T3IdentityUserRole", b =>
                {
                    b.HasOne("_01_Data.Entities.T3IdentityRole", "Role")
                        .WithMany("ListUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_01_Data.Entities.T3IdentityUser", "User")
                        .WithMany("ListRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_01_Data.Entities.T3Item", b =>
                {
                    b.HasOne("_01_Data.Entities.T3Location", "Location")
                        .WithMany("ListItems")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("_01_Data.Entities.T3Module", "Module")
                        .WithMany("ListItems")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_01_Data.Entities.T3Module", "ModuleType")
                        .WithMany("ListModuleTypeItems")
                        .HasForeignKey("ModuleTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Location");

                    b.Navigation("Module");

                    b.Navigation("ModuleType");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ItemHierarchy", b =>
                {
                    b.HasOne("_01_Data.Entities.T3Item", "Child")
                        .WithMany("ListParents")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_01_Data.Entities.T3Item", "Parent")
                        .WithMany("ListChilds")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("_01_Data.Entities.T3LocationHierarchy", b =>
                {
                    b.HasOne("_01_Data.Entities.T3Location", "Child")
                        .WithMany("ListParents")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_01_Data.Entities.T3Location", "Parent")
                        .WithMany("ListChilds")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("_01_Data.Entities.T3LocationItem", b =>
                {
                    b.HasOne("_01_Data.Entities.T3Item", "Item")
                        .WithMany("ListLocations")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_01_Data.Entities.T3Location", "Location")
                        .WithMany("ListLocationItems")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ModuleHierarchy", b =>
                {
                    b.HasOne("_01_Data.Entities.T3Module", "Child")
                        .WithMany("ListParents")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_01_Data.Entities.T3Module", "Parent")
                        .WithMany("ListChilds")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ProcessTypeItem", b =>
                {
                    b.HasOne("_01_Data.Entities.T3Item", "Item")
                        .WithMany("ListProcessTypes")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_01_Data.Entities.T3ProcessType", "ProcessType")
                        .WithMany("ListItems")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("ProcessType");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ProcessTypeModule", b =>
                {
                    b.HasOne("_01_Data.Entities.T3Module", "Module")
                        .WithMany("ListProcessTypes")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_01_Data.Entities.T3ProcessType", "ProcessType")
                        .WithMany("ListModules")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("ProcessType");
                });

            modelBuilder.Entity("_01_Data.Entities.T3Property", b =>
                {
                    b.HasOne("_01_Data.Entities.T3FormResource", "FormResource")
                        .WithMany("ListProperties")
                        .HasForeignKey("FormResourceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("FormResource");
                });

            modelBuilder.Entity("_01_Data.Entities.T3PropertyPanel", b =>
                {
                    b.HasOne("_01_Data.Entities.T3TemplatePanel", "Panel")
                        .WithMany("ListPropertyFields")
                        .HasForeignKey("PanelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_01_Data.Entities.T3Property", "PropertyField")
                        .WithMany("ListPanels")
                        .HasForeignKey("PropertyFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Panel");

                    b.Navigation("PropertyField");
                });

            modelBuilder.Entity("_01_Data.Entities.T3PropertyTemplate", b =>
                {
                    b.HasOne("_01_Data.Entities.T3Property", "PropertyField")
                        .WithMany("ListTemplates")
                        .HasForeignKey("PropertyFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_01_Data.Entities.T3Template", "Template")
                        .WithMany("ListPropertyFields")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyField");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("_01_Data.Entities.T3Protocol", b =>
                {
                    b.HasOne("_01_Data.Entities.T3ProcessType", "ProcessType")
                        .WithMany("ListProtocols")
                        .HasForeignKey("ProcessTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessType");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ProtocolItem", b =>
                {
                    b.HasOne("_01_Data.Entities.T3Item", "Item")
                        .WithMany("ListProtocols")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_01_Data.Entities.T3Location", "Location")
                        .WithMany("ListProtocolItems")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_01_Data.Entities.T3Protocol", "Protocol")
                        .WithMany("ListProtocolItems")
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Location");

                    b.Navigation("Protocol");
                });

            modelBuilder.Entity("_01_Data.Entities.T3Shift", b =>
                {
                    b.HasOne("_01_Data.Entities.T3Location", "Location")
                        .WithMany("ListShifts")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ShiftBreak", b =>
                {
                    b.HasOne("_01_Data.Entities.T3Shift", "Shift")
                        .WithMany("ListBreaks")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ShiftTypeBreak", b =>
                {
                    b.HasOne("_01_Data.Entities.T3ShiftTypeDay", "ShiftTypeDay")
                        .WithMany("T3ShiftTypeBreaks")
                        .HasForeignKey("ShiftTypeDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftTypeDay");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ShiftTypeDay", b =>
                {
                    b.HasOne("_01_Data.Entities.T3ShiftType", "ShiftType")
                        .WithMany("ListDays")
                        .HasForeignKey("ShiftTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShiftTypeDay_ShiftType");

                    b.Navigation("ShiftType");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ShiftTypeLocation", b =>
                {
                    b.HasOne("_01_Data.Entities.T3Location", "Location")
                        .WithMany("ListShiftTypes")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_01_Data.Entities.T3ShiftType", "ShiftType")
                        .WithMany("ListLocations")
                        .HasForeignKey("ShiftTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("ShiftType");
                });

            modelBuilder.Entity("_01_Data.Entities.T3Template", b =>
                {
                    b.HasOne("_01_Data.Entities.T3Item", "Item")
                        .WithOne("Template")
                        .HasForeignKey("_01_Data.Entities.T3Template", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_01_Data.Entities.T3Module", "Module")
                        .WithOne("Template")
                        .HasForeignKey("_01_Data.Entities.T3Template", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("_01_Data.Entities.T3TemplateApprover", b =>
                {
                    b.HasOne("_01_Data.Entities.T3IdentityRole", "Role")
                        .WithMany("ListApproveTemplates")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("_01_Data.Entities.T3Template", "Template")
                        .WithMany("ListApprovers")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_01_Data.Entities.T3IdentityUser", "User")
                        .WithMany("ListApproveTemplates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Role");

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("_01_Data.Entities.T3TemplatePanel", b =>
                {
                    b.HasOne("_01_Data.Entities.T3Template", "Template")
                        .WithMany("ListPanels")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("_01_Data.Entities.T3Form", b =>
                {
                    b.Navigation("ListFormFields");
                });

            modelBuilder.Entity("_01_Data.Entities.T3FormField", b =>
                {
                    b.Navigation("ListValues");
                });

            modelBuilder.Entity("_01_Data.Entities.T3FormResource", b =>
                {
                    b.Navigation("ListItems");

                    b.Navigation("ListProperties");
                });

            modelBuilder.Entity("_01_Data.Entities.T3IdentityRole", b =>
                {
                    b.Navigation("ListApproveTemplates");

                    b.Navigation("ListChilds");

                    b.Navigation("ListClaims");

                    b.Navigation("ListParents");

                    b.Navigation("ListUsers");
                });

            modelBuilder.Entity("_01_Data.Entities.T3IdentityUser", b =>
                {
                    b.Navigation("ListApproveTemplates");

                    b.Navigation("ListClaims");

                    b.Navigation("ListFormApproveds");

                    b.Navigation("ListFormCreates");

                    b.Navigation("ListFormFieldValue");

                    b.Navigation("ListRoles");
                });

            modelBuilder.Entity("_01_Data.Entities.T3Item", b =>
                {
                    b.Navigation("Form");

                    b.Navigation("ListChilds");

                    b.Navigation("ListLocations");

                    b.Navigation("ListParents");

                    b.Navigation("ListProcessTypes");

                    b.Navigation("ListProtocols");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("_01_Data.Entities.T3Location", b =>
                {
                    b.Navigation("ListChilds");

                    b.Navigation("ListItems");

                    b.Navigation("ListLocationItems");

                    b.Navigation("ListParents");

                    b.Navigation("ListProtocolItems");

                    b.Navigation("ListShiftTypes");

                    b.Navigation("ListShifts");
                });

            modelBuilder.Entity("_01_Data.Entities.T3Module", b =>
                {
                    b.Navigation("Form");

                    b.Navigation("ListChilds");

                    b.Navigation("ListItems");

                    b.Navigation("ListModuleTypeItems");

                    b.Navigation("ListParents");

                    b.Navigation("ListProcessTypes");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ProcessType", b =>
                {
                    b.Navigation("ListItems");

                    b.Navigation("ListModules");

                    b.Navigation("ListProtocols");
                });

            modelBuilder.Entity("_01_Data.Entities.T3Property", b =>
                {
                    b.Navigation("ListFormFields");

                    b.Navigation("ListPanels");

                    b.Navigation("ListTemplates");
                });

            modelBuilder.Entity("_01_Data.Entities.T3Protocol", b =>
                {
                    b.Navigation("ListProtocolItems");
                });

            modelBuilder.Entity("_01_Data.Entities.T3Shift", b =>
                {
                    b.Navigation("ListBreaks");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ShiftType", b =>
                {
                    b.Navigation("ListDays");

                    b.Navigation("ListLocations");
                });

            modelBuilder.Entity("_01_Data.Entities.T3ShiftTypeDay", b =>
                {
                    b.Navigation("T3ShiftTypeBreaks");
                });

            modelBuilder.Entity("_01_Data.Entities.T3Template", b =>
                {
                    b.Navigation("ListApprovers");

                    b.Navigation("ListForms");

                    b.Navigation("ListPanels");

                    b.Navigation("ListPropertyFields");
                });

            modelBuilder.Entity("_01_Data.Entities.T3TemplatePanel", b =>
                {
                    b.Navigation("ListPropertyFields");
                });
#pragma warning restore 612, 618
        }
    }
}
